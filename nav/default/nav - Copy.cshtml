@using DotNetNuke.Web.DDRMenu;
@using System.Dynamic; 
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@{ 
    var root = Model.Source.root; 
}

@helper RenderNodes(IList<MenuNode> nodes) {
if (nodes.Count > 0)
{
        <ul class="navbar-nav ml-auto">
            @foreach (var node in nodes)
            {
                var isActive = "";
                if (node.Selected) { isActive = "active"; }


                if (node.HasChildren())
                {
                    <li class="nav-item @isActive dropdown">
                        <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="@node.Url" id="navbarDropdownMenuLink" aria-haspopup="true" aria-expanded="false">
                            @node.Text
                        </a>
                        @RenderChildNodes(node.Children)
                    </li>
                }
                else
                {
                    <li class="nav-item @isActive"><a class="nav-link" href="@node.Url">@node.Text</a></li>
                }
            }
        </ul>







	}<!-- ./ node count -->
}<!-- ./ helper -->

@helper RenderChildNodes(IList<MenuNode> nodes) {
    if (nodes.Count > 0)
    {
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdownMenuLink">
            @foreach (var node in nodes)
            {
                if (node.HasChildren())
                {
                    <a class="dropdown-item" href="@node.Url">@node.Text <span class="caret"></span></a>
                    @RenderChildNodes(node.Children)
                }
                else
                {
                    <a class="dropdown-item" href="@node.Url">@node.Text</a>
                }

            }
        </div>
	}
}

@RenderNodes(root.Children)